//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 DepthOfFieldParams;         // Offset:    0 Size:    16 [unused]
//   uint bSceneLightingChannelsValid;  // Offset:   16 Size:     4 [unused]
//   float4 GammaAndAlphaValues;        // Offset:   32 Size:    16
//   float4 ShaderParams;               // Offset:   48 Size:    16 [unused]
//   float4 ShaderParams2;              // Offset:   64 Size:    16 [unused]
//   float4 DrawFlags;                  // Offset:   80 Size:    16
//   float4 BatchColor;                 // Offset:   96 Size:    16 [unused]
//
// }
//
// cbuffer Material
// {
//
//   float4 Material_PreshaderBuffer[15];// Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// $Globals                          cbuffer      NA          NA            cb0      1 
// Material                          cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float       
// ORIGINAL_POSITION        0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float       
// TEXCOORD                 1   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB1[15], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v5.xyzw
dcl_output o0.xyzw
dcl_temps 8
add r0.xyzw, cb1[12].zwzw, cb1[12].xyxy
add r0.xyzw, -r0.xyzw, cb1[8].xyxy
add r1.xyzw, r0.xwzy, l(-1.000000, -2.000000, -2.000000, -1.000000)
min r0.x, r0.w, r0.z
mad r0.x, r0.x, l(0.500000), l(-2.000000)
min r0.x, r0.x, cb1[11].x
mov r0.y, l(0)
add r0.z, r0.x, l(1.000000)
add r2.xyzw, -r0.yzzy, r1.xwxw
mul r3.xy, v5.zwzz, v5.xyxx
mad r3.xy, r3.xyxx, cb1[8].xyxx, -cb1[12].xyxx
add r2.xyzw, r2.xyzw, -r3.xyxy
add_sat r2.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
add_sat r4.xyzw, r3.xyxy, l(-0.500000, -0.500000, -1.500000, -1.500000)
mul r2.x, r2.x, r4.x
add r3.zw, r0.xxxx, l(0.000000, 0.000000, 1.000000, 2.000000)
add r5.xyzw, -r3.wwww, r3.yxxy
add_sat r5.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp2 r3.w, r5.zwzz, r5.zwzz
sqrt r3.w, r3.w
mul r2.x, r2.x, r5.x
mul r2.x, r2.y, r2.x
mul r2.y, r2.z, r5.y
mul r2.y, r4.y, r2.y
mul r2.y, r2.w, r2.y
max r2.x, r2.y, r2.x
add r2.y, -r3.w, r3.z
add r2.z, r0.x, -r3.w
add_sat r2.yz, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
max r2.x, r2.y, r2.x
add r6.xyzw, -r0.zzyx, r1.xwzy
add r7.xyzw, -r0.xyxx, r1.zyzy
add r2.yw, r3.xxxy, -r6.xxxy
add r4.xy, -r3.xyxx, r6.zwzz
add_sat r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp2 r0.y, r2.ywyy, r2.ywyy
sqrt r0.y, r0.y
add r0.y, -r0.y, r3.z
add_sat r0.y, r0.y, l(0.500000)
max r0.y, r0.y, r2.x
mov r6.yz, r1.wwxw
mov r0.w, -r0.z
mov r6.xw, l(2.000000,0,0,2.000000)
add r2.xy, r0.xwxx, r6.xyxx
mad r0.zw, r0.zzzx, l(0.000000, 0.000000, -1.000000, 1.000000), r6.zzzw
add r0.zw, -r0.zzzw, r3.xxxy
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
add r0.z, -r0.z, r3.z
add r2.xy, -r2.xyxx, r3.xyxx
dp2 r0.w, r2.xyxx, r2.xyxx
sqrt r0.w, r0.w
add r0.w, -r0.w, r3.z
add_sat r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
max r0.y, r0.w, r0.y
max r0.y, r0.z, r0.y
mul r0.z, r0.y, cb1[10].w
mad r0.y, -r0.y, cb1[10].w, cb1[9].w
mul r0.w, r4.x, r4.z
mul r0.w, r5.x, r0.w
mul r0.w, r4.y, r0.w
add r2.xy, -r3.xyxx, r7.xyxx
add r3.zw, r3.xxxy, -r7.zzzw
dp2 r2.w, r3.zwzz, r3.zwzz
sqrt r2.w, r2.w
add r2.w, r0.x, -r2.w
add_sat r2.xyw, r2.xyxw, l(0.500000, 0.500000, 0.000000, 0.500000)
mul r2.x, r2.x, r5.y
mul r2.x, r4.w, r2.x
mul r2.x, r2.y, r2.x
max r0.w, r0.w, r2.x
max r0.w, r2.z, r0.w
max r0.w, r2.w, r0.w
mov r1.xw, l(2.000000,0,0,2.000000)
mad r1.xyzw, r0.xxxx, l(1.000000, -1.000000, -1.000000, 1.000000), r1.xyzw
add r1.xyzw, -r1.xyzw, r3.xyxy
dp2 r1.x, r1.xyxx, r1.xyxx
dp2 r1.y, r1.zwzz, r1.zwzz
sqrt r1.xy, r1.xyxx
add r1.y, r0.x, -r1.y
add_sat r1.y, r1.y, l(0.500000)
add r0.x, r0.x, -r1.x
add_sat r0.x, r0.x, l(0.500000)
max r0.x, r0.x, r0.w
max r0.x, r1.y, r0.x
mad r0.y, r0.x, r0.y, r0.z
mul_sat r1.w, r0.y, cb1[14].x
add r0.yzw, cb1[9].xxyz, -cb1[10].xxyz
mad r0.xyz, r0.xxxx, r0.yzwy, cb1[10].xyzx
add r2.xyz, -r0.xyzx, cb1[13].yzwy
mad r0.xyz, cb1[13].xxxx, r2.xyzx, r0.xyzx
max r1.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xyzw, r1.xyzw, v1.xyzw
mad r1.xyz, r1.xyzx, v1.xyzx, l(-0.250000, -0.250000, -0.250000, 0.000000)
mad_sat r1.xyz, r1.xyzx, cb0[2].wwww, l(0.250000, 0.250000, 0.250000, 0.000000)
ne r2.xy, cb0[2].wyww, l(1.000000, 1.000000, 0.000000, 0.000000)
movc r0.xyz, r2.xxxx, r1.xyzx, r0.xyzx
log r1.xyz, r0.xyzx
mul r1.xyz, r1.xyzx, cb0[2].xxxx
mul r2.xzw, r1.xxyz, l(0.416667, 0.000000, 0.416667, 0.416667)
exp r1.xyz, r1.xyzx
exp r2.xzw, r2.xxzw
mad r2.xzw, r2.xxzw, l(1.055000, 0.000000, 1.055000, 1.055000), l(-0.055000, 0.000000, -0.055000, -0.055000)
mul r3.xyz, r1.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
ge r1.xyz, r1.xyzx, l(0.003131, 0.003131, 0.003131, 0.000000)
movc r1.xyz, r1.xyzx, r2.xzwx, r3.xyzx
movc o0.xyz, r2.yyyy, r1.xyzx, r0.xyzx
mul r0.x, r0.w, l(0.450000)
ne r0.y, cb0[5].x, l(0.000000)
movc o0.w, r0.y, r0.x, r0.w
ret 
// Approximately 111 instruction slots used
